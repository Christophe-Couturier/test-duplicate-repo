#!/usr/bin/python2

import json
import pprint
import socket
import struct
import sys
import time

import websocket
import mosquitto


websocket.enableTrace(False)
ws = websocket.WebSocket()
ws.connect("ws://localhost:8080/pubsub/sub/34")

def get_default_gateway_linux():
    """Read the default gateway directly from /proc."""
    with open("/proc/net/route") as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                continue

            return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))

def state_to_str(state):
    d = {
        # Off or unavailable
        0: "\x00\x00\x00",
        1: "\x00\x00\x00",

        # Reds
        2: "\x01\x00\x00",
        3: "\x01\x00\x00",

        # Green
        4: "\x01\x01\x00",
        5: "\x00\x00\x01",
        6: "\x00\x00\x01",

        # Orange
        7: "\x00\x01\x00",
        8: "\x00\x01\x00",
        9: "\x00\x01\x00",
    }

    return d[state]

def send_red(cli, topic):
    red_on = "\x01\x00\x00"
    red_off = "\x00\x00\x00"
    if not hasattr(send_red, "last_state"):
        send_red.last_state = 0
    if not hasattr(send_red, "last_call"):
        send_red.last_call = 0

    now = time.time()
    if (now - send_red.last_call) <= 1.2:
        pass
    else:
        send_red.last_call = now
        if send_red.last_state == red_on:
            send_red.last_state = red_off
        else:
            send_red.last_state = red_on
        cli.publish(topic, send_red.last_state)

def send_orange(cli, topic):
    orange_on = "\x00\x01\x00"
    orange_off = "\x00\x00\x00"
    if not hasattr(send_orange, "last_state"):
        send_orange.last_state = 0
    if not hasattr(send_orange, "last_call"):
        send_orange.last_call = 0

    now = time.time()
    if (now - send_orange.last_call) <= 1.2:
        pass
    else:
        send_orange.last_call = now
        if send_orange.last_state == orange_on:
            send_orange.last_state = orange_off
        else:
            send_orange.last_state = orange_on
        cli.publish(topic, send_orange.last_state)


def publish_mqtt():
    MQTT_BROKER = get_default_gateway_linux()
    MQTT_PORT = 1883
    topic = "TrafficLight/InTopic/TL_%.2d/LightRequest"
    cli = mosquitto.Mosquitto()
    cli.connect(MQTT_BROKER, MQTT_PORT)

    last_evt_state = ''
    while True:
        spatjson = json.loads(ws.recv())
        states = spatjson['spat']['intersections'][0]['states']
        for st in states:
            signal_group = st['signalGroup']
            evt_state = st['stateTimeSpeed'][0]['eventState']

            if evt_state == 2:
                send_red(cli, topic % (signal_group))
            elif evt_state == 9:
                send_orange(cli, topic % (signal_group))
            elif evt_state != last_evt_state:
                cli.publish(topic % (signal_group), state_to_str(evt_state))
            last_evt_state = evt_state

if __name__ == '__main__':
    publish_mqtt()
