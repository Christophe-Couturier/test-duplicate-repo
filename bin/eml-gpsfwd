#!/usr/bin/env python
from __future__ import print_function
from gevent.server import StreamServer

import websocket
import datetime
import json
import sys

# this handler will be run for each incoming connection in a dedicated greenlet
def gpsd(socket, address):
    banner = """{"class":"VERSION","release":"2.93","rev":"2010-03-30T12:18:17","proto_major":3,"proto_minor":2}\n"""
    response = """{"class":"DEVICES","devices":[{"class":"DEVICE","path":"/dev/ttyUSB0", "activated":1269959537.20,"native":0,"bps":4800,"parity":"N", "stopbits":1,"cycle":1.00}]}
{"class":"WATCH","enable":true,"json":true,"nmea":false,"raw":0,"scaled":false,"timing":false,"pps":false} """

    ws = websocket.WebSocket()
    ws.connect("ws://localhost:8080/cache/register/0/1/123045")

    tpv = """{"class":"TPV","time":"%s","ept":0.005,"lat":%s,"lon":%s,"epx":15.319,"epy":17.054,"track":10.3797,"speed":%s,"eps":34.11,"mode":2}\n"""
    print('New connection from %s:%s' % address)
    socket.sendall(banner)
    # using a makefile because we want to use readline()
    rfileobj = socket.makefile(mode='r')
    line = rfileobj.readline()
    if line == '?WATCH={"enable":true,"json":true}':
        socket.sendall(response)
    while True:
        try:
            cacheline = ws.recv()
        except websocket.WebSocketConnectionClosedException, e:
            sys.exit(1)
        line = json.loads(cacheline)
        if not line:
            print("client disconnected")
            break

        utcnow = datetime.datetime.utcnow().isoformat()
        lat = line.get('lat', 0.0)
        lon = line.get('lon', 0.0)
        speed = line.get('speed', 0.0)
        socket.sendall(tpv % (utcnow, lat, lon, speed))

    rfileobj.close()

if __name__ == '__main__':
    server = StreamServer(('0.0.0.0', 2947), gpsd)
    # to start the server asynchronously, use its start() method;
    # we use blocking serve_forever() here because we have no other jobs
    print('Starting gpsd server on port 2947')
    server.serve_forever()
