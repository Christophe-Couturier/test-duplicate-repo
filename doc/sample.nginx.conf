##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	location ~ "/(ctl|status)$" {
		proxy_pass http://localhost:8080;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# WebSocket support (nginx 1.4)
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
	location ~ "/env/(?<envid>[0-9]+?)/pubsub/(pub|sub)/([0-9]+)(/([0-9]+)|$)" {
		set_by_lua $res '
			addr = "10.1.1.0/24"
			local _, _, ip1, ip2, ip3, ip4, mask = addr:find("(%d+).(%d+).(%d+).(%d+)/(%d+)")
			local ip = { tonumber( ip1 ), tonumber( ip2 ), tonumber( ip3 ), tonumber( ip4 ) }
			local prefixlen = 30
			local subnet_size = math.pow(2, (32 - prefixlen))
			local base_ip = ((ip[4] + (ip[3]*0x100) + (ip[2]*0x10000)) + (ip[1]*0x1000000))
			local function ip_to_str(p)
				local a, b, c, d, ret

				d = math.floor(p % 256)
				p = math.floor(p / 256)
				c = math.floor(p % 256)
				p = math.floor(p / 256)
				b = math.floor(p % 256)
				p = math.floor(p / 256)
				a = math.floor(p % 256)

				ret = { a, b, c, d}
				return ret
			end

			local ret = ""
			local i = 0
			while i <= tonumber(ngx.var.envid) do
				local t = ip_to_str(tonumber(base_ip+2))
				ret = (t[1] .. "." .. t[2] .. "." .. t[3] .. "." .. t[4])
				base_ip = math.floor(base_ip + subnet_size)
				i = i + 1
			end
			return ret';
		rewrite ^/env/([0-9]+?)/(.*)$ /$2 break;
		proxy_pass http://$res:8080;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# WebSocket support (nginx 1.4)
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

	location ~ "/env/(?<envid>[0-9]+?)/(?<baseurl>cache/(get|set|register)/([0-9]+)/([0-9]+))(/(?<appid>[0-9]+)|$)" {
		set_by_lua $res '
			addr = "10.1.1.0/24"
			local _, _, ip1, ip2, ip3, ip4, mask = addr:find("(%d+).(%d+).(%d+).(%d+)/(%d+)")
			local ip = { tonumber( ip1 ), tonumber( ip2 ), tonumber( ip3 ), tonumber( ip4 ) }
			local prefixlen = 30
			local subnet_size = math.pow(2, (32 - prefixlen))
			local base_ip = ((ip[4] + (ip[3]*0x100) + (ip[2]*0x10000)) + (ip[1]*0x1000000))
			local function ip_to_str(p)
				local a, b, c, d, ret

				d = math.floor(p % 256)
				p = math.floor(p / 256)
				c = math.floor(p % 256)
				p = math.floor(p / 256)
				b = math.floor(p % 256)
				p = math.floor(p / 256)
				a = math.floor(p % 256)

				ret = { a, b, c, d}
				return ret
			end

			local ret = ""
			local i = 0
			while i <= tonumber(ngx.var.envid) do
				local t = ip_to_str(tonumber(base_ip+2))
				ret = (t[1] .. "." .. t[2] .. "." .. t[3] .. "." .. t[4])
				base_ip = math.floor(base_ip + subnet_size)
				i = i + 1
			end
			return ret';

		set_by_lua $appid '
			local id = ""
			if ngx.var.appid == "" or ngx.var.appid == nil then
				id = math.random(65535, 4294967296)
			else
				id = ngx.var.appid
			end
			return id';

		rewrite ^/env/([0-9]+?)/(.*)$ /$baseurl/$appid break;
		proxy_pass http://$res:8080;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# WebSocket support (nginx 1.4)
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
}
