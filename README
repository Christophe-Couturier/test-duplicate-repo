1. Introduction

itseml is a Python module that simplifies the setup of an emulated ITS station
by setting up a network namespace, and starting the various components as
services after the configuration for each component has been applied.

2. Usage

Starting/stopping stations happens dynamically. Specifically, the ws-itseml
and cli-itseml expect to receive an appropriately formatted JSON over
WebSockets and stdin respectively.

A sample JSON to start a station:
{
  "action": "start",
  "id": 1,               # Must be unique. It is used to identify the netns
  "stationid": 1234      # StationID used in the mw-server configuration.
  "gn": {
     "gn_addr": "0000:aabb:ccdd:eeff" # GeoNetworking Address
     "geobc_fwd_alg": 0  # Set to 4 to disable GeoBroadcast line forwarding
  },
  "denm": {
     "forwarding": true  # Set to false to disable DENM forwarding
     "forceactionid": false
     "autoupdate": false
  },
  "position": {          # Define static position of the station
     "lat": "48.837590",
     "lon": "2.101363"
  }
  "ivi": {
     "autoupdate": false
  },
  "trafficlight": {
      "durations": [
          [
              5,
              5,
              5,
              5,
              5
          ]
      ],
      "interval": 1500,
      "states": [
          [
              7,
              3,
              4,
              5,
              9
          ]
      ]
  }
  "map":{
    "interval":2000,
    [...]
  }
}

The following fiels are optional:
  - gn
  - stationid
  - denm
  - ivi
  - trafficlight
  - map
If 'gn' is not set, a random GN address is used, and the default GeoBC
forwarding algorithm is used.
If 'stationid' is not set, a random ID is generated for the station.
If 'denm' is not set, the values displayed above are used.
If 'ivi' is not set, the values displayed above are used.
If 'trafficlight' is not set, the emulated station will not emit any SPAT
If 'map' is not set, the emulated station will not emit any MAP



To stop the station:
{
  "action": "stop",
  "id": 1
}

Any additional fields will be ignored.

cli-itseml is provided as a testing aid. The usage is: cli-itseml < file.json
ws-itseml listens on port 8080, although in practice it sits behind a proxy.

The provided nginx configuration (doc/sample.nginx.conf) is set to proxy
several locations:
 - /ctl
 - /status
 - /env/<envid>/pubsub/pub/<msgid>
 - /env/<envid>/pubsub/sub/<msgid>
 - /env/<envid>/cache/get/<cacheid>/<objectid>
 - /env/<envid>/cache/set/<cacheid>/<objectid>
 - /env/<envid>/cache/register/<cacheid>/<objectid>

The first two requests are proxied to ws-itseml.
The others are used to communicate with the middleware WebSocket API of each
station. To achieve this, nginx must be compiled with an embedded Lua
interpreter (on debian, use the nginx-extras package).

3. Installation

First, build the deb package with:
        make

The package will install:
 - the python module
 - the cli-itseml and ws-itseml frontends (in /usr/bin)
 - the required systemd unit files (in /lib/systemd/system)
 - some documentation in /usr/share/doc/itseml/

For a fully functional setup, you need to:
 - configure the v2xbr bridge (see below)
 - install and configure nginx:
    * apt-get install nginx-extras # We need Lua support
    * cp /usr/share/doc/itseml/sample.nginx.conf /etc/nginx/sites-available
    * ln -sf /etc/nginx/sites-available/sample.nginx.conf /etc/nginx/sites-enabled/default

The last command will only overwrite the symlink; the default file is left
untouched. Adjust if necessary.

4. Internals

An ITS stack is currently defined as:
 - itsnet
 - mwtun
 - mw-server

Each ITS stack runs in a network namespace named:
 - envX

For each instance, two veth pairs are created:
 - vtxX <-> veth0
 - ctlX <-> ctl0

The different vtxX devices are bridged together, in a bridge called v2xbr.

There are various components/configurations needed to achieve a workable
setup:

 - bridge:
  On generic Linux systems:
        ip link add v2xbr type bridge # or "brctl addbr v2xbr"
        ip link set v2xbr up

  On Debian-like systems, the appropriate stanza for /etc/network/interfaces
is:
        auto v2xbr
        iface v2xbr inet manual
            bridge_ports none
            bridge_fd 0
            bridge_maxwait 0
            bridge_stp off

 - netns:
        The network namespace is setup via the appropriate script (installed
  as /usr/bin/setup_netns). The script is called by the eml-netns@.service unit.

 - eml-ip-setup:
        Script to apply IP configuration after the network namespace has been
  created. The script is called by the eml-ip-setup@.service unit.

 - itsnet:
        The GeoNetworking daemon is started by the eml-itsnet@.service unit.

 - mwtun:
        Interface betwen itsnet and mw-server. Started by the
eml-mwtun@service unit.

 - mw-server:
        The middleware server is started the eml-mw-server@.service unit.

 - ws-itseml:
        A simple Python wrapper using gevent-websocket to process the received
  JSON data using the itseml module.
